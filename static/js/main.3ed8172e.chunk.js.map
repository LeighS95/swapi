{"version":3,"sources":["components/Star.js","components/Card.js","components/CardSection.js","App.js","serviceWorker.js","index.js"],"names":["Star","props","active","className","xmlns","width","height","viewBox","d","Card","name","model","crew","passengers","films","mostFilms","length","CardSection","sortContent","content","arr","forEach","i","parseInt","push","sortedArr","sort","a","b","A","console","log","map","item","index","key","state","fetch","then","res","json","data","setState","results","this","Component","App","classNAme","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yUAsBeA,G,YAnBF,SAAAC,GAAU,IAEXC,EAAWD,EAAXC,OAER,OACI,yBAAKC,UAAU,mBACVD,EACG,yBAAKC,UAAU,eAAeC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAC5F,0BAAMC,EAAE,gHAGZ,yBAAKJ,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aACnE,0BAAMC,EAAE,mHCwBbC,G,MAnCF,SAAAR,GAAU,IAEXS,EAAoDT,EAApDS,KAAMC,EAA8CV,EAA9CU,MAAOC,EAAuCX,EAAvCW,KAAMC,EAAiCZ,EAAjCY,WAAYC,EAAqBb,EAArBa,MAAOC,EAAcd,EAAdc,UAE9C,OACI,yBAAKZ,UAAU,QACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,uBACX,4BAAKO,GACL,2BAAIC,IAEPI,EACG,kBAAC,EAAD,CAAMb,QAAM,IAEZ,MAGR,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,sBACX,4BAAKS,GACL,oCAEJ,yBAAKT,UAAU,4BACX,4BAAKU,GACL,0CAEJ,yBAAKV,UAAU,uBACX,4BAAKW,EAAME,QACX,yCC+CLC,E,YAzEX,aAAe,IAAD,8BACV,+CAiBJC,YAAc,SAAAC,GACV,IAAIC,EAAM,GACNL,EAAY,EAChBI,EAAQE,SAAQ,SAAAC,GACTC,SAASD,EAAEV,KAAM,KAAO,KACpBU,EAAER,MAAME,OAASD,IAChBA,EAAYO,EAAER,MAAME,QAExBI,EAAII,KAAKF,OAGjB,IAAIG,EAAYL,EAAIM,MAAK,SAACC,EAAGC,GACzB,IAAIC,EAAIN,SAASI,EAAEf,KAAM,IAEzB,OADQW,SAASK,EAAEhB,KAAM,IAChBiB,KAGb,OADAC,QAAQC,IAAIN,GACLA,EAAUO,KAAI,SAACC,EAAMC,GAAP,OACjBD,EAAKnB,MAAME,SAAWD,EAClB,kBAAC,EAAD,CACAoB,IAAKD,EACLxB,KAAMuB,EAAKvB,KACXC,MAAOsB,EAAKtB,MACZC,KAAMqB,EAAKrB,KACXC,WAAYoB,EAAKpB,WACjBC,MAAOmB,EAAKnB,MACZC,WAAS,IAGT,kBAAC,EAAD,CACAoB,IAAKD,EACLxB,KAAMuB,EAAKvB,KACXC,MAAOsB,EAAKtB,MACZC,KAAMqB,EAAKrB,KACXC,WAAYoB,EAAKpB,WACjBC,MAAOmB,EAAKnB,YAlDpB,EAAKsB,MAAQ,CACTjB,QAAS,IAJH,E,iFAQO,IAAD,OAGhBkB,MAFY,kCAEDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACpC,EAAKC,SAAS,CACVvB,QAASsB,EAAKE,SACfb,QAAQC,IAAIU,S,+BA8Cb,IAEEtB,EAAYyB,KAAKR,MAAjBjB,QAER,OACI,yBAAKhB,UAAU,0BACVyC,KAAK1B,YAAYC,Q,GAnER0B,a,MCSXC,MAVf,WACE,OACE,yBAAK3C,UAAU,OACb,wBAAIA,UAAU,WAAd,SACA,uBAAG4C,UAAU,cAAb,8MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.3ed8172e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Star.css';\r\n\r\nconst Star = props => {\r\n\r\n    const { active } = props;\r\n\r\n    return (\r\n        <div className=\"Star__Container\">\r\n            {active ? (\r\n                <svg className=\"Star__Active\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                    <path d=\"M12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z\"/>\r\n                </svg>\r\n            ) : (\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                    <path d=\"M12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z\"/>\r\n                </svg>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Star;","import React from 'react';\r\nimport Star from './Star';\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n\r\n    const { name, model, crew, passengers, films, mostFilms } = props;\r\n\r\n    return (\r\n        <div className=\"Card\">\r\n            <div className=\"Card__Title\">\r\n                <div className=\"Card__Title_Content\">\r\n                    <h1>{name}</h1>\r\n                    <p>{model}</p>\r\n                </div>\r\n                {mostFilms ? (\r\n                    <Star active />\r\n                ): (\r\n                    null\r\n                )}\r\n            </div>\r\n            <div className=\"Card__Content\">\r\n                <div className=\"Card__Content_Crew\">\r\n                    <h3>{crew}</h3>\r\n                    <p>Crew</p>\r\n                </div>\r\n                <div className=\"Card__Content_Passengers\">\r\n                    <h3>{passengers}</h3>\r\n                    <p>Passengers</p>\r\n                </div>\r\n                <div className=\"Card__Content_Films\">\r\n                    <h3>{films.length}</h3>\r\n                    <p>Films</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport './CardSection.css';\r\n\r\nimport Card from './Card';\r\n\r\nclass CardSection extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            content: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = \"https://swapi.co/api/starships\";\r\n\r\n        fetch(url).then(res => res.json()).then(data => {\r\n            this.setState({\r\n                content: data.results\r\n            }, console.log(data))\r\n        });\r\n    }\r\n\r\n    sortContent = content => {\r\n        let arr = [];\r\n        let mostFilms = 0;\r\n        content.forEach(i => {\r\n            if(parseInt(i.crew, 10) >= 10) {\r\n                if(i.films.length > mostFilms) {\r\n                    mostFilms = i.films.length;\r\n                }\r\n                arr.push(i);\r\n            }\r\n        });\r\n        let sortedArr = arr.sort((a, b) => {\r\n            let A = parseInt(a.crew, 10);\r\n            let B = parseInt(b.crew, 10);\r\n            return B-A;\r\n        });\r\n        console.log(sortedArr);\r\n        return sortedArr.map((item, index) => (\r\n            item.films.length === mostFilms ? (\r\n                <Card\r\n                key={index}\r\n                name={item.name}\r\n                model={item.model}\r\n                crew={item.crew}\r\n                passengers={item.passengers}\r\n                films={item.films}\r\n                mostFilms\r\n                />\r\n            ) : (\r\n                <Card\r\n                key={index}\r\n                name={item.name}\r\n                model={item.model}\r\n                crew={item.crew}\r\n                passengers={item.passengers}\r\n                films={item.films}\r\n                />\r\n            )\r\n            \r\n        ))\r\n    }\r\n\r\n    render() {\r\n\r\n        const { content } = this.state;\r\n\r\n        return (\r\n            <div className=\"CardSection__Container\">\r\n                {this.sortContent(content)}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CardSection;","import React from 'react';\nimport CardSection from './components/CardSection';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"heading\">Ships</h1>\n      <p classNAme=\"subheading\">These are the ships with more that 10 in crew and sorted by number in crew in decending order. Additionally a star icon denotes most film apperances (more than one will show if in same amount of films).</p>\n      <CardSection />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}